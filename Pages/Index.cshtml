@page
@model IndexModel
@{ ViewData["Title"] = "Classes"; }

<div>
    <h1 class="display-4 text-center">Hello - your results should show beneath this header and instruction set:</h1>
    <ul>
        <li>There is a <strong>build error</strong> in the supplied code. Correct the bug and ensure the project builds.</li>
        <li>There is a <strong>runtime error</strong> in the supplied code. Run the project, evaluate the stack error, and correct the bug.</li>
        <li>
            The supplied CSV should populate a list of classes in the index page. We want you to display the classes on the index page, following these rules and using the supplied bootstrap CSS wherever possible:
            <ul>
                <li>Each class should be displayed in a table like the one at the bottom</li>
                <li>There should be one table per distinct <strong>quarter code</strong>, where quarter code is the last 4 characters of <strong>ClassID</strong>. All classes with that quarter code should go in that table, and put an h2 above each labelling which quarter code it contains.</li>
                <li>Order these tables on the page by their quarter code, <strong>descending</strong></li>
                <li>The classes inside each table should be ordered by <strong>CourseID</strong>, <strong>ascending</strong></li>
                <li><strong>Item Number</strong> should be the first four characters of <strong>ClassID</strong></li>
                <li><strong>Credits </strong>should display as a decimal in xx.x format. The values that are imported are from a legacy system; you will need to move the decimal point left 1 place on the whole numbers. For example, <strong>50 </strong>should display as <strong>5.0</strong>.</li>
                <li>
                    Convert the <strong>Modality </strong>supplied to a Modality display string by updating the get function for the <strong>DisplayModality </strong>property in the model, using this data:
                    <ul>
                        <li>
                            <table style="border-collapse: collapse; width: 32.3106%; height: 186px;" border="1">
                                <tbody>
                                    <tr>
                                        <td style="width: 48.3179%;">Modality</td>
                                        <td style="width: 48.3179%;">DisplayModality</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 48.3179%;">80</td>
                                        <td style="width: 48.3179%;">Hybrid</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 48.3179%;">50</td>
                                        <td style="width: 48.3179%;">Virtual</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 48.3179%;">51</td>
                                        <td style="width: 48.3179%;">Virtual Hybrid</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 48.3179%;">3C</td>
                                        <td style="width: 48.3179%;">Online</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 48.3179%;">[else]</td>
                                        <td style="width: 48.3179%;">Face to Face</td>
                                    </tr>
                                </tbody>
                            </table>
                        </li>
                    </ul>
                </li>
                <li>
                    The <strong>Status </strong>field should display the following:
                    <ul>
                        <li>If <strong>SectionStatusID1 </strong>is an 'X', show <strong>Cancelled</strong>, and make the whole row for that class <strong>red</strong></li>
                        <li>
                            If the number of <strong>StudentsEnrolled </strong>is greater than or equal to the <strong>ClassCapacity</strong>, show <strong>Closed</strong>, and make the whole row for that class <strong>yellow</strong>
                            <ul>
                                <li>Otherwise, show <strong>Open - [number of seats remaining]</strong>, and make the whole row for that class <strong>green</strong></li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
    <table style="border-collapse: collapse; width: 100%;" border="1">
        <tbody>
            <tr>
                <td style="width: 12.8011%;">Item Number</td>
                <td style="width: 12.8011%;">Course ID</td>
                <td style="width: 12.9025%;">Course Title</td>
                <td style="width: 12.9025%;">Credits</td>
                <td style="width: 12.9025%;">Days</td>
                <td style="width: 12.9025%;">Modality</td>
                <td style="width: 12.9025%;">Status</td>
            </tr>
            <tr>
                <td style="width: 12.8011%;">&nbsp;</td>
                <td style="width: 12.8011%;">&nbsp;</td>
                <td style="width: 12.9025%;">&nbsp;</td>
                <td style="width: 12.9025%;">&nbsp;</td>
                <td style="width: 12.9025%;">&nbsp;</td>
                <td style="width: 12.9025%;">&nbsp;</td>
                <td style="width: 12.9025%;">&nbsp;</td>
            </tr>
        </tbody>
    </table>

    <hr />

    <p>Your code starts here!</p>
@foreach (var item in Model._classes.OrderByDescending(u => u.Quarter).GroupBy(u => u.Quarter))
{
        var quarter = @item.AsQueryable().FirstOrDefault().Quarter;
<h2>Quarter @quarter</h2>
<table class="table table-bordered">
    <thead>
        <tr>
            <th scope="col">Item Number</th>
            <th scope="col">Course ID</th>
            <th scope="col">Course Title</th>
            <th scope="col">Credits</th>
            <th scope="col">Days</th>
            <th scope="col">Modality</th>
            <th scope="col">Status</th>
        </tr>
    <thead>
    <tbody>
    @foreach (var class1 in Model._classes.OrderBy(u => u.ClassID))
    {
        @if (class1.Quarter == quarter)
        {

            @if (class1.Status == "Cancelled")
            {
                <tr class="table-danger">
                    <td>@class1.ClassID.Remove(class1.ClassID.Length - 4, 4)</td>
                    <td>@Html.DisplayFor(m => class1.CourseID)</td>
                    <td>@Html.DisplayFor(m => class1.CourseTitle)</td>
                    <td>@String.Format("{0:0.0}", class1.Credits / 10)</td>
                    <td>@Html.DisplayFor(m => class1.DayID)</td>
                    <td>@Html.DisplayFor(m => class1.DisplayModality)</td>

                    <td>@Html.DisplayFor(m => class1.Status)</td>

                 </tr>
            }
            else if (class1.Status == "Closed")
            {
            <tr class="table-warning">
                <td>@class1.ClassID.Remove(class1.ClassID.Length - 4, 4)</td>
                <td>@Html.DisplayFor(m => class1.CourseID)</td>
                <td>@Html.DisplayFor(m => class1.CourseTitle)</td>
                <td>@String.Format("{0:0.0}", class1.Credits / 10)</td>
                <td>@Html.DisplayFor(m => class1.DayID)</td>
                <td>@Html.DisplayFor(m => class1.DisplayModality)</td>

                <td>@Html.DisplayFor(m => class1.Status)</td>
                </tr>
            }
            else
            {
            <tr class="table-success">

                <td>@class1.ClassID.Remove(class1.ClassID.Length - 4, 4)</td>
                <td>@Html.DisplayFor(m => class1.CourseID)</td>
                <td>@Html.DisplayFor(m => class1.CourseTitle)</td>
                <td>@String.Format("{0:0.0}", class1.Credits / 10)</td>
                <td>@Html.DisplayFor(m => class1.DayID)</td>
                <td>@Html.DisplayFor(m => class1.DisplayModality)</td>

                <td>@Html.DisplayFor(m => class1.Status)</td>
            </tr>
            }
        }
    }

    </tbody>
</table>
}
    <br />
</div>
